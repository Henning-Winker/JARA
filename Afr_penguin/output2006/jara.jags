
    model {
    # Priors and constraints
    for(i in 1:nI)
    {
    mean.r[i] ~ dnorm(0, 0.001) 
    logN.est[1,i] ~ dnorm(log(Ninit[i]),pow(0.5,-2))   # Prior for initial population size with CV =100%
    }
    
    
    
    
      # Process variance
      isigma2 <- isigma2.est 
      sigma2 <- pow(isigma2,-1)
      sigma <- sqrt(sigma2)
      fakesigma.fixed <- sigma.fixed # Prevent unused variable error msg    
      
      # Obsevation variance
      # Observation error
      itau2~ dgamma(0.001,0.001)
      tau2 <- 1/itau2
      
      
      for(i in 1:nI)
      {
      for(t in 1:T)
      {
      var.obs[t,i] <- SE2[t,i]+tau2
      ivar.obs[t,i] <- 1/var.obs[t,i]
      # note total observation error (TOE)     
      TOE[t,i] <- sqrt(var.obs[t,i])
      
      }}
        
    # Process variance prior
    isigma2.est ~ dgamma(igamma[1],igamma[2])
    pen.sigma <- ifelse(sigma>proc.pen[1],log(sigma)-log(proc.pen[1]),0) 
    penSig  ~ dnorm(pen.sigma,pow(0.2,-2))
    
    
    # Likelihood
    # State process
    for (t in 1:(T-1)){
    for (i in 1:nI){
    logN.est[t+1,i] <- logN.est[t,i]+r[t,i]
    }}
    # Set last year r to r.mean
    for (i in 1:nI){
    for(t in 1:(EY-1)){
    rdev[t,i] ~ dnorm(0, isigma2) #T(proc.pen[2],proc.pen[3])
    r[t,i] <- mean.r[i]+ rdev[t,i]-0.5*sigma2    #dnorm(mean.r[i], isigma2)
    }}
    
                
   for (i in 1:nI){
   r.proj[i] <- mean(mean.r[i]+ rdev[prjr,i]-0.5*sigma2)} 
     
    for (i in 1:nI){
    for(t in EY:(T-1)){
    rdev[t,i] ~ dnorm(0, pow(0.01,-2))
    r[t,i] <- ifelse(logN.est[t,i]>max(logN.est[1:(EY-1),i])+log(Ks[i]),0,r.proj[i]) 
      
    }}
      
    #for(t in 1:(T)){
    #for (i in 1:nI){
    #devK[t,i]  <- ifelse(logN.est[t,i]>log(Ks[i]),logN.est[t,i]-log(Ks[i]),0) # penalty if N > K 
    #penK[t,i] ~ dnorm(devK[t,i],pow(0.1,-2))
    #}}
    
    
    lambda[1] <- 1
    # Observation process
    for (t in 1:T) {
    for(i in 1:nI){
    y[t,i] ~ dnorm(logN.est[t,i], ivar.obs[t,i])
    }}
    
    # Population sizes on real scale
    for (t in 1:T) {
    for(i in 1:nI){
    N.est[t,i] <- exp(logN.est[t,i])
    }
    Ntot[t] <- sum(N.est[t,])
    logNtot[t] <- log(Ntot[t])
    }
    for(t in 2:T)
    {
    r.tot[t] <- logNtot[t]-logNtot[t-1]
    }
    } 
    
